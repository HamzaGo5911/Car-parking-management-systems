// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Parking parking
//
// swagger:model Parking
type Parking struct {

	// entry time
	// Format: date-time
	EntryTime strfmt.DateTime `json:"entry_time,omitempty"`

	// exit time
	// Format: date-time
	ExitTime strfmt.DateTime `json:"exit_time,omitempty"`

	// hourly rate
	HourlyRate float64 `json:"hourly_rate,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// total amount
	TotalAmount float64 `json:"total_amount,omitempty"`
}

// Validate validates this parking
func (m *Parking) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Parking) validateEntryTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EntryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("entry_time", "body", "date-time", m.EntryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Parking) validateExitTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExitTime) { // not required
		return nil
	}

	if err := validate.FormatOf("exit_time", "body", "date-time", m.ExitTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this parking based on context it is used
func (m *Parking) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Parking) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Parking) UnmarshalBinary(b []byte) error {
	var res Parking
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
