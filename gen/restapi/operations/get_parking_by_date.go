// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetParkingByDateHandlerFunc turns a function with the right signature into a get parking by date handler
type GetParkingByDateHandlerFunc func(GetParkingByDateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetParkingByDateHandlerFunc) Handle(params GetParkingByDateParams) middleware.Responder {
	return fn(params)
}

// GetParkingByDateHandler interface for that can handle valid get parking by date params
type GetParkingByDateHandler interface {
	Handle(GetParkingByDateParams) middleware.Responder
}

// NewGetParkingByDate creates a new http.Handler for the get parking by date operation
func NewGetParkingByDate(ctx *middleware.Context, handler GetParkingByDateHandler) *GetParkingByDate {
	return &GetParkingByDate{Context: ctx, Handler: handler}
}

/*
	GetParkingByDate swagger:route GET /parkings/revenue/{exit_time} getParkingByDate

Return parkings based on entry time
*/
type GetParkingByDate struct {
	Context *middleware.Context
	Handler GetParkingByDateHandler
}

func (o *GetParkingByDate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetParkingByDateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
