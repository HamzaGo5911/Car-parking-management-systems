// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A car-parking-management-system ",
    "title": "Car-Parking API",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/cars": {
      "post": {
        "operationId": "addCar",
        "parameters": [
          {
            "description": "car's details",
            "name": "car",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Car"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "car added or updated",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "400": {
            "description": "bad request"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "description": "return car based on ID",
        "operationId": "getCar",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the car",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "car response",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "404": {
            "description": "car not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "operationId": "updateCar",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the car",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "car's details",
            "name": "car",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Car"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "car updated",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "car not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "operationId": "deleteCar",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the car",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "car deleted"
          },
          "404": {
            "description": "car not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/parkings": {
      "post": {
        "operationId": "addParking",
        "parameters": [
          {
            "description": "Parking's details",
            "name": "parking",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Parking added or updated",
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/parkings/revenue/{exit_time}": {
      "get": {
        "description": "Return parkings based on entry time",
        "operationId": "getParkingByDate",
        "parameters": [
          {
            "type": "string",
            "description": "Entry time of the parking",
            "name": "exit_time",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Parking"
              }
            }
          },
          "404": {
            "description": "Parking not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/parkings/{id}": {
      "get": {
        "description": "return parking based on ID",
        "operationId": "getParking",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the parking",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "parking response",
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          },
          "404": {
            "description": "parking not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "operationId": "updateParking",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the parking",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "parking's details",
            "name": "parking",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "parking updated",
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "parking not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "operationId": "deleteParking",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the parking",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "parking deleted with exit time"
          },
          "204": {
            "description": "parking deleted"
          },
          "404": {
            "description": "parking not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Car": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "licensePlate": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "plateNumber": {
          "type": "string"
        }
      }
    },
    "Parking": {
      "type": "object",
      "properties": {
        "entry_time": {
          "type": "string",
          "format": "date-time"
        },
        "exit_time": {
          "type": "string",
          "format": "date-time"
        },
        "hourly_rate": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "total_amount": {
          "type": "number"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A car-parking-management-system ",
    "title": "Car-Parking API",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/cars": {
      "post": {
        "operationId": "addCar",
        "parameters": [
          {
            "description": "car's details",
            "name": "car",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Car"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "car added or updated",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "400": {
            "description": "bad request"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "description": "return car based on ID",
        "operationId": "getCar",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the car",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "car response",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "404": {
            "description": "car not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "operationId": "updateCar",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the car",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "car's details",
            "name": "car",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Car"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "car updated",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "car not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "operationId": "deleteCar",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the car",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "car deleted"
          },
          "404": {
            "description": "car not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/parkings": {
      "post": {
        "operationId": "addParking",
        "parameters": [
          {
            "description": "Parking's details",
            "name": "parking",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Parking added or updated",
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/parkings/revenue/{exit_time}": {
      "get": {
        "description": "Return parkings based on entry time",
        "operationId": "getParkingByDate",
        "parameters": [
          {
            "type": "string",
            "description": "Entry time of the parking",
            "name": "exit_time",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Parking"
              }
            }
          },
          "404": {
            "description": "Parking not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/parkings/{id}": {
      "get": {
        "description": "return parking based on ID",
        "operationId": "getParking",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the parking",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "parking response",
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          },
          "404": {
            "description": "parking not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "operationId": "updateParking",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the parking",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "parking's details",
            "name": "parking",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "parking updated",
            "schema": {
              "$ref": "#/definitions/Parking"
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "parking not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "operationId": "deleteParking",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the parking",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "parking deleted with exit time"
          },
          "204": {
            "description": "parking deleted"
          },
          "404": {
            "description": "parking not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Car": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "licensePlate": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "plateNumber": {
          "type": "string"
        }
      }
    },
    "Parking": {
      "type": "object",
      "properties": {
        "entry_time": {
          "type": "string",
          "format": "date-time"
        },
        "exit_time": {
          "type": "string",
          "format": "date-time"
        },
        "hourly_rate": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "total_amount": {
          "type": "number"
        }
      }
    }
  }
}`))
}
