// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Car-parking-management-systems/gen/models"
)

// UpdateCarReader is a Reader for the UpdateCar structure.
type UpdateCarReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCarReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCarOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCarBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCarNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCarInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateCarOK creates a UpdateCarOK with default headers values
func NewUpdateCarOK() *UpdateCarOK {
	return &UpdateCarOK{}
}

/*
UpdateCarOK describes a response with status code 200, with default header values.

car updated
*/
type UpdateCarOK struct {
	Payload *models.Car
}

// IsSuccess returns true when this update car o k response has a 2xx status code
func (o *UpdateCarOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update car o k response has a 3xx status code
func (o *UpdateCarOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update car o k response has a 4xx status code
func (o *UpdateCarOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update car o k response has a 5xx status code
func (o *UpdateCarOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update car o k response a status code equal to that given
func (o *UpdateCarOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateCarOK) Error() string {
	return fmt.Sprintf("[PUT /cars/{id}][%d] updateCarOK  %+v", 200, o.Payload)
}

func (o *UpdateCarOK) String() string {
	return fmt.Sprintf("[PUT /cars/{id}][%d] updateCarOK  %+v", 200, o.Payload)
}

func (o *UpdateCarOK) GetPayload() *models.Car {
	return o.Payload
}

func (o *UpdateCarOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Car)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCarBadRequest creates a UpdateCarBadRequest with default headers values
func NewUpdateCarBadRequest() *UpdateCarBadRequest {
	return &UpdateCarBadRequest{}
}

/*
UpdateCarBadRequest describes a response with status code 400, with default header values.

bad request
*/
type UpdateCarBadRequest struct {
}

// IsSuccess returns true when this update car bad request response has a 2xx status code
func (o *UpdateCarBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update car bad request response has a 3xx status code
func (o *UpdateCarBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update car bad request response has a 4xx status code
func (o *UpdateCarBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update car bad request response has a 5xx status code
func (o *UpdateCarBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update car bad request response a status code equal to that given
func (o *UpdateCarBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateCarBadRequest) Error() string {
	return fmt.Sprintf("[PUT /cars/{id}][%d] updateCarBadRequest ", 400)
}

func (o *UpdateCarBadRequest) String() string {
	return fmt.Sprintf("[PUT /cars/{id}][%d] updateCarBadRequest ", 400)
}

func (o *UpdateCarBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCarNotFound creates a UpdateCarNotFound with default headers values
func NewUpdateCarNotFound() *UpdateCarNotFound {
	return &UpdateCarNotFound{}
}

/*
UpdateCarNotFound describes a response with status code 404, with default header values.

car not found
*/
type UpdateCarNotFound struct {
}

// IsSuccess returns true when this update car not found response has a 2xx status code
func (o *UpdateCarNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update car not found response has a 3xx status code
func (o *UpdateCarNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update car not found response has a 4xx status code
func (o *UpdateCarNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update car not found response has a 5xx status code
func (o *UpdateCarNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update car not found response a status code equal to that given
func (o *UpdateCarNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateCarNotFound) Error() string {
	return fmt.Sprintf("[PUT /cars/{id}][%d] updateCarNotFound ", 404)
}

func (o *UpdateCarNotFound) String() string {
	return fmt.Sprintf("[PUT /cars/{id}][%d] updateCarNotFound ", 404)
}

func (o *UpdateCarNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCarInternalServerError creates a UpdateCarInternalServerError with default headers values
func NewUpdateCarInternalServerError() *UpdateCarInternalServerError {
	return &UpdateCarInternalServerError{}
}

/*
UpdateCarInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type UpdateCarInternalServerError struct {
}

// IsSuccess returns true when this update car internal server error response has a 2xx status code
func (o *UpdateCarInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update car internal server error response has a 3xx status code
func (o *UpdateCarInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update car internal server error response has a 4xx status code
func (o *UpdateCarInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update car internal server error response has a 5xx status code
func (o *UpdateCarInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update car internal server error response a status code equal to that given
func (o *UpdateCarInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateCarInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /cars/{id}][%d] updateCarInternalServerError ", 500)
}

func (o *UpdateCarInternalServerError) String() string {
	return fmt.Sprintf("[PUT /cars/{id}][%d] updateCarInternalServerError ", 500)
}

func (o *UpdateCarInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
