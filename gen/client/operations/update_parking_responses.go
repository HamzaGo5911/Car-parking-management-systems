// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"Car-parking-management-systems/gen/models"
)

// UpdateParkingReader is a Reader for the UpdateParking structure.
type UpdateParkingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateParkingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateParkingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateParkingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateParkingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateParkingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateParkingOK creates a UpdateParkingOK with default headers values
func NewUpdateParkingOK() *UpdateParkingOK {
	return &UpdateParkingOK{}
}

/*
UpdateParkingOK describes a response with status code 200, with default header values.

parking updated
*/
type UpdateParkingOK struct {
	Payload *models.Parking
}

// IsSuccess returns true when this update parking o k response has a 2xx status code
func (o *UpdateParkingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update parking o k response has a 3xx status code
func (o *UpdateParkingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parking o k response has a 4xx status code
func (o *UpdateParkingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update parking o k response has a 5xx status code
func (o *UpdateParkingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update parking o k response a status code equal to that given
func (o *UpdateParkingOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateParkingOK) Error() string {
	return fmt.Sprintf("[PUT /parkings/{id}][%d] updateParkingOK  %+v", 200, o.Payload)
}

func (o *UpdateParkingOK) String() string {
	return fmt.Sprintf("[PUT /parkings/{id}][%d] updateParkingOK  %+v", 200, o.Payload)
}

func (o *UpdateParkingOK) GetPayload() *models.Parking {
	return o.Payload
}

func (o *UpdateParkingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Parking)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateParkingBadRequest creates a UpdateParkingBadRequest with default headers values
func NewUpdateParkingBadRequest() *UpdateParkingBadRequest {
	return &UpdateParkingBadRequest{}
}

/*
UpdateParkingBadRequest describes a response with status code 400, with default header values.

bad request
*/
type UpdateParkingBadRequest struct {
}

// IsSuccess returns true when this update parking bad request response has a 2xx status code
func (o *UpdateParkingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parking bad request response has a 3xx status code
func (o *UpdateParkingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parking bad request response has a 4xx status code
func (o *UpdateParkingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parking bad request response has a 5xx status code
func (o *UpdateParkingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update parking bad request response a status code equal to that given
func (o *UpdateParkingBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateParkingBadRequest) Error() string {
	return fmt.Sprintf("[PUT /parkings/{id}][%d] updateParkingBadRequest ", 400)
}

func (o *UpdateParkingBadRequest) String() string {
	return fmt.Sprintf("[PUT /parkings/{id}][%d] updateParkingBadRequest ", 400)
}

func (o *UpdateParkingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateParkingNotFound creates a UpdateParkingNotFound with default headers values
func NewUpdateParkingNotFound() *UpdateParkingNotFound {
	return &UpdateParkingNotFound{}
}

/*
UpdateParkingNotFound describes a response with status code 404, with default header values.

parking not found
*/
type UpdateParkingNotFound struct {
}

// IsSuccess returns true when this update parking not found response has a 2xx status code
func (o *UpdateParkingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parking not found response has a 3xx status code
func (o *UpdateParkingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parking not found response has a 4xx status code
func (o *UpdateParkingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parking not found response has a 5xx status code
func (o *UpdateParkingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update parking not found response a status code equal to that given
func (o *UpdateParkingNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateParkingNotFound) Error() string {
	return fmt.Sprintf("[PUT /parkings/{id}][%d] updateParkingNotFound ", 404)
}

func (o *UpdateParkingNotFound) String() string {
	return fmt.Sprintf("[PUT /parkings/{id}][%d] updateParkingNotFound ", 404)
}

func (o *UpdateParkingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateParkingInternalServerError creates a UpdateParkingInternalServerError with default headers values
func NewUpdateParkingInternalServerError() *UpdateParkingInternalServerError {
	return &UpdateParkingInternalServerError{}
}

/*
UpdateParkingInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type UpdateParkingInternalServerError struct {
}

// IsSuccess returns true when this update parking internal server error response has a 2xx status code
func (o *UpdateParkingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parking internal server error response has a 3xx status code
func (o *UpdateParkingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parking internal server error response has a 4xx status code
func (o *UpdateParkingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update parking internal server error response has a 5xx status code
func (o *UpdateParkingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update parking internal server error response a status code equal to that given
func (o *UpdateParkingInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateParkingInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /parkings/{id}][%d] updateParkingInternalServerError ", 500)
}

func (o *UpdateParkingInternalServerError) String() string {
	return fmt.Sprintf("[PUT /parkings/{id}][%d] updateParkingInternalServerError ", 500)
}

func (o *UpdateParkingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
